package com.example.novelonline.fragments

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import com.example.novelonline.R
import com.example.novelonline.databinding.FragmentAddTitleBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase
import java.util.Date

// Data class to represent the novel (book)
data class Novel(
    val id: String = "",
    val title: String = "",
    val authorId: String = "", // Add authorId to link to the user
    val createdOn: Date = Date(),
    val lastUpdated: Date = Date()
)

class AddTitleFragment : Fragment() {

    private var _binding: FragmentAddTitleBinding? = null
    private val binding get() = _binding!!

    // Declare Firebase instances
    private lateinit var firestore: FirebaseFirestore
    private lateinit var auth: FirebaseAuth

    // Declare views
    private lateinit var backArrow: TextView
    private lateinit var mainTitleEditText: EditText
    private lateinit var addTitleButton: Button

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentAddTitleBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Initialize Firebase instances
        auth = FirebaseAuth.getInstance()
        firestore = Firebase.firestore

        // Initialize views using the binding object
        backArrow = binding.backArrow
        mainTitleEditText = binding.mainTitleEditText
        addTitleButton = binding.addTitleButton

        // Set click listener for the back arrow
        backArrow.setOnClickListener {
            findNavController().navigateUp()
        }

        // Set click listener for the "Add Title" button
        addTitleButton.setOnClickListener {
            val bookTitle = mainTitleEditText.text.toString().trim()

            // 1. Basic validation: Check if the title is not empty
            if (bookTitle.isEmpty()) {
                Toast.makeText(requireContext(), "Please enter a book title", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            // Check if user is authenticated
            val currentUser = auth.currentUser
            if (currentUser == null) {
                Toast.makeText(requireContext(), "User not logged in", Toast.LENGTH_SHORT).show()
                // You might want to navigate back to the login screen here
                return@setOnClickListener
            }

            // 2. Add the novel to Firestore
            addNovelToFirestore(bookTitle, currentUser.uid)
        }
    }

    /**
     * Adds a new novel document to the "books" collection in Firestore.
     * The novel's ID is automatically generated by Firestore.
     *
     * @param novelTitle The title of the novel to be added.
     * @param authorId The UID of the current authenticated user.
     */
    private fun addNovelToFirestore(novelTitle: String, authorId: String) {
        // Create a new Novel object. Firestore will automatically handle the ID.
        val newNovel = Novel(
            title = novelTitle,
            authorId = authorId,
            createdOn = Date(),
            lastUpdated = Date()
        )

        // Get a reference to the "books" collection. If it doesn't exist, Firestore will create it.
        firestore.collection("books")
            .add(newNovel)
            .addOnSuccessListener { documentReference ->
                // The novel was successfully added. You can get the new ID here.
                val novelId = documentReference.id
                Toast.makeText(requireContext(), "Novel title added!", Toast.LENGTH_SHORT).show()

                // Navigate using Safe Args, passing the novelId
                val action = AddTitleFragmentDirections.actionAddTitleFragmentToCompleteBookInfoFragment(novelId)
                findNavController().navigate(action)
            }
            .addOnFailureListener { e ->
                Log.w("AddTitleFragment", "Error adding novel", e)
                Toast.makeText(requireContext(), "Error adding novel: ${e.message}", Toast.LENGTH_SHORT).show()
            }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
